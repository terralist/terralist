{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terralist","text":"<p>Terralist is a private Terraform registry for providers and modules that follows the published HashiCorp protocols.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#fully-private","title":"Fully private","text":"<p>Terralist's only way to operate is private<sup>*</sup>. It requires authentication for any module/provider operation, including fetching them. It is integrated with the terraform-cli and allows its users to authenticate with a simple <code>terraform login</code> command, via an Oauth provider. You can also generate API keys for programmatic access.</p> <sup>*</sup>If you plan to deploy Terralist in an isolated environment, there is also the option of allowing anonymous (unauthenticated) downloads."},{"location":"#securely-distributing-your-data","title":"Securely distributing your data","text":"<p>Terralist can host your modules code and providers binaries either locally or remotely in a private storage environment (e.g. a cloud bucket). If you opt for a remote storage environment, every time Terralist is asked for a download request, it will ask the cloud environment to generate a temporarily presigned URL, then forward that particular URL to the requester.</p>"},{"location":"#artifacts-documentation","title":"Artifacts documentation","text":"<p>Terralist analyses the artifacts you are pushing into it and automatically generates documentation for them. You can also bring your own documentation if you prefer handling it on your own. The documentation is then versioned and displayed in the web UI.</p>"},{"location":"#proxy-mode","title":"Proxy mode","text":"<p>Terralist can also operate in proxy mode, where Terralist will simply forward any URL that it receives from the creators. This means you can take advantage of the Terraform <code>version</code> attribute while storing your modules in a git mono-repository.</p>"},{"location":"#web-dashboard","title":"Web Dashboard","text":"<p>Terralist exposes an SPA dashboard to the web, that you can use to control your modules, providers and authorities.</p>"},{"location":"artifacts-documentation/","title":"Artifacts Documentation","text":"<p>Terralist generates and renders documentation for the artifacts it stores. You can either bring your own documentation or let Terralist generate it automatically.</p>"},{"location":"artifacts-documentation/#modules","title":"Modules","text":"<p>Module documentation consists of a single Markdown file. Users can bring their own documentation by bundling a <code>README.md</code> file with the module before uploading it to Terralist.</p> <p>If you'd like Terralist to automatically generate module documentation for you, here's what happens:</p> <ol> <li>Terralist unzips your module files locally.</li> <li>The files are processed using terraform-config-inspect.</li> <li>The generated Markdown is pushed to the storage provider and served on each request (either rendered in the UI or returned via the API).</li> </ol> <p>If, by any means, Terralist is unable to process the module and generate the documentation for it, the upload will NOT fail. The module archive will still be uploaded without documentation and a warning log will be produced.</p> <p>Terralist will attempt to find a <code>README.md</code> before generating the documentation on its own. To properly detect which <code>README.md</code> file is the correct one, it will recursively traverse the directory tree. The first parent node which contains any <code>*.tf</code> file will be considered a root module, and, if this directory contains a <code>README.md</code> file, the file will be selected and used as documentation.</p> <p>If the archive contains multiple subdirectories, and at least two of them have <code>*.tf</code> files (and a <code>README.md</code> file), it is undetermined which one will be selected as the 'root module' - depending on how the OS sorts the directories.</p>"},{"location":"artifacts-documentation/#providers","title":"Providers","text":"<p>Provider documentation is still in progress. It will be available soon!</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Terralist supports multiple types of configuration:</p> <ul> <li> <p>CLI arguments    Set the option by passing it with the <code>--</code> prefix on the CLI command (e.g. <code>--port</code>).</p> </li> <li> <p>Environment Variable    Any option can be set using an environment variable. To do such, replace any dash (<code>-</code>) with an underscore (<code>_</code>), uppercase everything and add the <code>TERRALIST_</code> prefix (e.g. <code>TERRALIST_PORT</code>).</p> </li> <li> <p>Configuration File    Set all options you want to a configuration file, then pass the path to the configuration file using the <code>config</code> option (<code>--config</code> argument or <code>TERRALIST_CONFIG</code> environment variable). Supported file formats: JSON, TOML, YAML, HCL, INI, envfile and Java Properties files.</p> </li> </ul> <p>It is also possible to mix those types.</p> <p>Terralist also supports reading the environment at run-time. For example, if you only know the port value at run-time (e.g. you are running on Heroku), you can set the <code>TERRALIST_PORT</code> environment variable to <code>${PORT}</code>; this instruction will inform Terralist to read the value, at run-time, from the environment variable called <code>PORT</code>. It is also possible to set a default value, in case the given one is not present, by using a colon (<code>:</code>), example: <code>${PORT:5758}</code>.</p>"},{"location":"configuration/#options","title":"Options","text":""},{"location":"configuration/#config","title":"<code>config</code>","text":"<p>Path to YAML config file where flag values are set.</p> Name Value type string required no default <code>n/a</code> cli <code>--config</code> env <code>TERRALIST_CONFIG</code>"},{"location":"configuration/#log-level","title":"<code>log-level</code>","text":"<p>The log level.</p> Name Value type select choices <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code> required no default <code>info</code> cli <code>--log-level</code> env <code>TERRALIST_LOG_LEVEL</code>"},{"location":"configuration/#port","title":"<code>port</code>","text":"<p>The port to bind to.</p> Name Value type int required no default <code>5758</code> cli <code>--port</code> env <code>TERRALIST_PORT</code>"},{"location":"configuration/#url","title":"<code>url</code>","text":"<p>The URL that Terralist is accessible from.</p> Name Value type string required no default <code>http://localhost:5758</code> cli <code>--url</code> env <code>TERRALIST_URL</code>"},{"location":"configuration/#home","title":"<code>home</code>","text":"<p>The path to the directory where Terralist can store files.</p> Name Value type string required no default <code>$HOME/.terralist.d</code> cli <code>--home</code> env <code>TERRALIST_HOME</code>"},{"location":"configuration/#cert-file","title":"<code>cert-file</code>","text":"<p>The path to the certificate file (pem format).</p> Name Value type string required no default <code>n/a</code> cli <code>--cert-file</code> env <code>TERRALIST_CERT_FILE</code>"},{"location":"configuration/#key-file","title":"<code>key-file</code>","text":"<p>The path to the certificate key file (pem format).</p> Name Value type string required no default <code>n/a</code> cli <code>--key-file</code> env <code>TERRALIST_KEY_FILE</code>"},{"location":"configuration/#token-signing-secret","title":"<code>token-signing-secret</code>","text":"<p>The secret to use when signing authorization tokens.</p> Name Value type string required yes default <code>n/a</code> cli <code>--token-signing-secret</code> env <code>TERRALIST_TOKEN_SIGNING_SECRET</code>"},{"location":"configuration/#authorized-users","title":"<code>authorized-users</code>","text":"<p>Comma separated list of users authorized to access the settings page. If empty, all users are allowed.</p> Name Value type string required no default <code>n/a</code> cli <code>--authorized-users</code> env <code>TERRALIST_AUTHORIZED_USERS</code>"},{"location":"configuration/#rbac-policy-path","title":"<code>rbac-policy-path</code>","text":"<p>Path to the RBAC server-side policy.</p> Name Value type string required no default <code>n/a</code> cli <code>--rbac-policy-path</code> env <code>TERRALIST_RBAC_POLICY_PATH</code>"},{"location":"configuration/#rbac-default-role","title":"<code>rbac-default-role</code>","text":"<p>The name of the RBAC role that should be assigned by default to all users.</p> Name Value type string required no default <code>readonly</code> cli <code>--rbac-default-role</code> env <code>TERRALIST_RBAC_DEFAULT_ROLE</code>"},{"location":"configuration/#auth-token-expiration","title":"<code>auth-token-expiration</code>","text":"<p>The duration for which auth tokens remain valid.</p> Name Value type select choices <code>1d</code>, <code>1w</code>, <code>1m</code>, <code>1y</code>, <code>never</code> required no default <code>1d</code> cli <code>--auth-token-expiration</code> env <code>TERRALIST_AUTH_TOKEN_EXPIRATION</code>"},{"location":"configuration/#oauth-provider","title":"<code>oauth-provider</code>","text":"<p>The OAuth 2.0 provider.</p> Name Value type select choices <code>github</code>, <code>bitbucket</code>, <code>gitlab</code>, <code>oidc</code> required yes default <code>n/a</code> cli <code>--oauth-provider</code> env <code>TERRALIST_OAUTH_PROVIDER</code>"},{"location":"configuration/#gh-client-id","title":"<code>gh-client-id</code>","text":"<p>The GitHub OAuth Application client ID.</p> Name Value type string required no default <code>n/a</code> cli <code>--gh-client-id</code> env <code>TERRALIST_GH_CLIENT_ID</code>"},{"location":"configuration/#gh-client-secret","title":"<code>gh-client-secret</code>","text":"<p>The GitHub OAuth Application client secret.</p> Name Value type string required no default <code>n/a</code> cli <code>--gh-client-secret</code> env <code>TERRALIST_GH_CLIENT_SECRET</code>"},{"location":"configuration/#gh-organization","title":"<code>gh-organization</code>","text":"<p>The GitHub organization to use for user validation.</p> Name Value type string required no default <code>n/a</code> cli <code>--gh-organization</code> env <code>TERRALIST_GH_ORGANIZATION</code>"},{"location":"configuration/#gh-teams","title":"<code>gh-teams</code>","text":"<p>The GitHub team slugs in CSV format to use for user validation. This requires <code>gh-organization</code> to be set.</p> Name Value type string required no default <code>n/a</code> cli <code>--gh-teams</code> env <code>TERRALIST_GH_TEAMS</code>"},{"location":"configuration/#gh-domain","title":"<code>gh-domain</code>","text":"<p>The GitHub base domain if you are using GitHub Enterprise.</p> Name Value type string required no default <code>github.com</code> cli <code>--gh-domain</code> env <code>TERRALIST_GH_DOMAIN</code>"},{"location":"configuration/#bb-client-id","title":"<code>bb-client-id</code>","text":"<p>The BitBucket OAuth Application client ID.</p> Name Value type string required no default <code>n/a</code> cli <code>--bb-client-id</code> env <code>TERRALIST_BB_CLIENT_ID</code>"},{"location":"configuration/#bb-client-secret","title":"<code>bb-client-secret</code>","text":"<p>The BitBucket OAuth Application client secret.</p> Name Value type string required no default <code>n/a</code> cli <code>--bb-client-secret</code> env <code>TERRALIST_BB_CLIENT_SECRET</code>"},{"location":"configuration/#bb-workspace","title":"<code>bb-workspace</code>","text":"<p>The BitBucket workspace to use for user validation.</p> Name Value type string required no default <code>n/a</code> cli <code>--bb-workspace</code> env <code>TERRALIST_BB_WORKSPACE</code>"},{"location":"configuration/#gl-client-id","title":"<code>gl-client-id</code>","text":"<p>The GitLab OAuth Application client ID.</p> Name Value type string required no default <code>n/a</code> cli <code>--gl-client-id</code> env <code>TERRALIST_GL_CLIENT_ID</code>"},{"location":"configuration/#gl-client-secret","title":"<code>gl-client-secret</code>","text":"<p>The Gitlab OAuth Application client secret.</p> Name Value type string required no default <code>n/a</code> cli <code>--gl-client-secret</code> env <code>TERRALIST_GL_CLIENT_SECRET</code>"},{"location":"configuration/#gl-host","title":"<code>gl-host</code>","text":"<p>The (self hosted) GitLab host to use. E.g. gitlab.mycompany.com:8443</p> Name Value type string required no default <code>gitlab.com</code> cli <code>--gl-host</code> env <code>TERRALIST_GL_HOST</code>"},{"location":"configuration/#gl-groups","title":"<code>gl-groups</code>","text":"<p>The GitLab groups names the user must be member of. It must be comma separated with no spaces.</p> Name Value type string required no default <code>n/a</code> cli <code>--gl-groups</code> env <code>TERRALIST_GL_GROUPS</code>"},{"location":"configuration/#oi-client-id","title":"<code>oi-client-id</code>","text":"<p>The OpenID Connect client ID.</p> Name Value type string required no default <code>n/a</code> cli <code>--oi-client-id</code> env <code>TERRALIST_OI_CLIENT_ID</code>"},{"location":"configuration/#oi-client-secret","title":"<code>oi-client-secret</code>","text":"<p>The OpenID Connect client secret.</p> Name Value type string required no default <code>n/a</code> cli <code>--oi-client-secret</code> env <code>TERRALIST_OI_CLIENT_SECRET</code>"},{"location":"configuration/#oi-authorize-url","title":"<code>oi-authorize-url</code>","text":"<p>The url to OpenID Connect authorization endpoint. E.g. <code>https://login.mycompany.com/auth/realms/developer/protocol/openid-connect/auth</code></p> Name Value type string required no default <code>n/a</code> cli <code>--oi-authorize-url</code> env <code>TERRALIST_OI_AUTHORIZE_URL</code>"},{"location":"configuration/#oi-token-url","title":"<code>oi-token-url</code>","text":"<p>The url to OpenID Connect token endpoint. E.g. <code>https://login.mycompany.com/auth/realms/developer/protocol/openid-connect/token</code></p> Name Value type string required no default <code>n/a</code> cli <code>--oi-token-url</code> env <code>TERRALIST_OI_TOKEN_URL</code>"},{"location":"configuration/#oi-userinfo-url","title":"<code>oi-userinfo-url</code>","text":"<p>The url to OpenID Connect userinfo endpoint. E.g. <code>https://login.mycompany.com/auth/realms/developer/protocol/openid-connect/userinfo</code></p> Name Value type string required no default <code>n/a</code> cli <code>--oi-userinfo-url</code> env <code>TERRALIST_OI_USERINFO_URL</code>"},{"location":"configuration/#oi-scope","title":"<code>oi-scope</code>","text":"<p>The OpenID Connect scope requested during authorization to ensure to get claims <code>sub</code> and <code>email</code>.</p> Name Value type string required no default <code>openid email</code> cli <code>--oi-scope</code> env <code>TERRALIST_OI_SCOPE</code>"},{"location":"configuration/#database-backend","title":"<code>database-backend</code>","text":"<p>The database backend.</p> Name Value type select choices <code>sqlite</code>, <code>postgresql</code>, <code>mysql</code> required no default <code>sqlite</code> cli <code>--database-backend</code> env <code>TERRALIST_DATABASE_BACKEND</code>"},{"location":"configuration/#postgres-url","title":"<code>postgres-url</code>","text":"<p>The URL that can be used to connect to PostgreSQL database.</p> Name Value type string required no default <code>n/a</code> cli <code>--postgres-url</code> env <code>TERRALIST_POSTGRES_URL</code>"},{"location":"configuration/#postgres-host","title":"<code>postgres-host</code>","text":"<p>The host where the PostgreSQL database can be found.</p> Name Value type string required no default <code>n/a</code> cli <code>--postgres-host</code> env <code>TERRALIST_POSTGRES_HOST</code>"},{"location":"configuration/#postgres-port","title":"<code>postgres-port</code>","text":"<p>The port on which the PostgreSQL database listens.</p> Name Value type int required no default <code>n/a</code> cli <code>--postgres-port</code> env <code>TERRALIST_POSTGRES_PORT</code>"},{"location":"configuration/#postgres-username","title":"<code>postgres-username</code>","text":"<p>The username that can be used to authenticate to PostgreSQL database.</p> Name Value type string required no default <code>n/a</code> cli <code>--postgres-username</code> env <code>TERRALIST_POSTGRES_USERNAME</code>"},{"location":"configuration/#postgres-password","title":"<code>postgres-password</code>","text":"<p>The password that can be used to authenticate to PostgreSQL database.</p> Name Value type string required no default <code>n/a</code> cli <code>--postgres-password</code> env <code>TERRALIST_POSTGRES_PASSWORD</code>"},{"location":"configuration/#postgres-database","title":"<code>postgres-database</code>","text":"<p>The schema name on which application data should be stored.</p> Name Value type string required no default <code>n/a</code> cli <code>--postgres-database</code> env <code>TERRALIST_POSTGRES_DATABASE</code>"},{"location":"configuration/#mysql-url","title":"<code>mysql-url</code>","text":"<p>The URL that can be used to connect to MySQL database.</p> Name Value type string required no default <code>n/a</code> cli <code>--mysql-url</code> env <code>TERRALIST_MYSQL_URL</code>"},{"location":"configuration/#mysql-host","title":"<code>mysql-host</code>","text":"<p>The host where the MySQL database can be found.</p> Name Value type string required no default <code>n/a</code> cli <code>--mysql-host</code> env <code>TERRALIST_MYSQL_HOST</code>"},{"location":"configuration/#mysql-port","title":"<code>mysql-port</code>","text":"<p>The port on which the MySQL database listens.</p> Name Value type int required no default <code>n/a</code> cli <code>--mysql-port</code> env <code>TERRALIST_MYSQL_PORT</code>"},{"location":"configuration/#mysql-username","title":"<code>mysql-username</code>","text":"<p>The username that can be used to authenticate to MySQL database.</p> Name Value type string required no default <code>n/a</code> cli <code>--mysql-username</code> env <code>TERRALIST_MYSQL_USERNAME</code>"},{"location":"configuration/#mysql-password","title":"<code>mysql-password</code>","text":"<p>The password that can be used to authenticate to MySQL database.</p> Name Value type string required no default <code>n/a</code> cli <code>--mysql-password</code> env <code>TERRALIST_MYSQL_PASSWORD</code>"},{"location":"configuration/#mysql-database","title":"<code>mysql-database</code>","text":"<p>The schema name on which application data should be stored.</p> Name Value type string required no default <code>n/a</code> cli <code>--mysql-database</code> env <code>TERRALIST_MYSQL_DATABASE</code>"},{"location":"configuration/#sqlite-path","title":"<code>sqlite-path</code>","text":"<p>The path to the SQLite database.</p> Name Value type string required no default <code>n/a</code> cli <code>--sqlite-path</code> env <code>TERRALIST_SQLITE_PATH</code>"},{"location":"configuration/#session-store","title":"<code>session-store</code>","text":"<p>The session store backend.</p> Name Value type select choices <code>cookie</code> required no default <code>cookie</code> cli <code>--session-store</code> env <code>TERRALIST_SESSION_STORE</code>"},{"location":"configuration/#cookie-secret","title":"<code>cookie-secret</code>","text":"<p>The secret to use for cookie encryption.</p> Name Value type string required no default <code>n/a</code> cli <code>--cookie-secret</code> env <code>TERRALIST_COOKIE_SECRET</code>"},{"location":"configuration/#modules-storage-resolver","title":"<code>modules-storage-resolver</code>","text":"<p>The modules storage resolver.</p> Name Value type select choices <code>proxy</code>, <code>local</code>, <code>s3</code>, <code>azure</code> required no default <code>proxy</code> cli <code>--modules-storage-resolver</code> env <code>TERRALIST_MODULES_STORAGE_RESOLVER</code>"},{"location":"configuration/#providers-storage-resolver","title":"<code>providers-storage-resolver</code>","text":"<p>The providers storage resolver.</p> Name Value type select choices <code>proxy</code>, <code>local</code>, <code>s3</code>, <code>azure</code> required no default <code>proxy</code> cli <code>--providers-storage-resolver</code> env <code>TERRALIST_PROVIDERS_STORAGE_RESOLVER</code>"},{"location":"configuration/#modules-anonymous-read","title":"<code>modules-anonymous-read</code>","text":"<p>Allows anonymous read and download of modules.</p> Name Value type bool required no default <code>false</code> cli <code>--modules-anonymous-read</code> env <code>TERRALIST_MODULES_ANONYMOUS_READ</code>"},{"location":"configuration/#providers-anonymous-read","title":"<code>providers-anonymous-read</code>","text":"<p>Allows anonymous read and download of providers.</p> Name Value type bool required no default <code>false</code> cli <code>--providers-anonymous-read</code> env <code>TERRALIST_PROVIDERS_ANONYMOUS_READ</code>"},{"location":"configuration/#s3-endpoint","title":"<code>s3-endpoint</code>","text":"<p>The endpoint where the S3 SDK should connect. By default, Terralist will connect to the AWS S3 endpoint.</p> Name Value type string required no default <code>n/a</code> cli <code>--s3-endpoint</code> env <code>TERRALIST_S3_ENDPOINT</code>"},{"location":"configuration/#s3-bucket-name","title":"<code>s3-bucket-name</code>","text":"<p>The S3 bucket name.</p> Name Value type string required no default <code>n/a</code> cli <code>--s3-bucket-name</code> env <code>TERRALIST_S3_BUCKET_NAME</code>"},{"location":"configuration/#s3-bucket-region","title":"<code>s3-bucket-region</code>","text":"<p>The S3 bucket region.</p> Name Value type string required no default <code>n/a</code> cli <code>--s3-bucket-region</code> env <code>TERRALIST_S3_BUCKET_REGION</code>"},{"location":"configuration/#s3-bucket-prefix","title":"<code>s3-bucket-prefix</code>","text":"<p>A prefix to be added to the S3 bucket keys.</p> Name Value type string required no default <code>n/a</code> cli <code>--s3-bucket-prefix</code> env <code>TERRALIST_S3_BUCKET_PREFIX</code>"},{"location":"configuration/#s3-presign-expire","title":"<code>s3-presign-expire</code>","text":"<p>The number of minutes after which the presigned URLs should expire.</p> Name Value type int required no default <code>15</code> cli <code>--s3-presign-expire</code> env <code>TERRALIST_S3_PRESIGN_EXPIRE</code>"},{"location":"configuration/#s3-access-key-id","title":"<code>s3-access-key-id</code>","text":"<p>The AWS access key ID to access the S3 bucket.</p> Name Value type string required no default <code>n/a</code> cli <code>--s3-access-key-id</code> env <code>TERRALIST_S3_ACCESS_KEY_ID</code>"},{"location":"configuration/#s3-secret-access-key","title":"<code>s3-secret-access-key</code>","text":"<p>The AWS secret access key to access the S3 bucket.</p> Name Value type string required no default <code>n/a</code> cli <code>--s3-secret-access-key</code> env <code>TERRALIST_S3_SECRET_ACCESS_KEY</code>"},{"location":"configuration/#s3-use-path-style","title":"<code>s3-use-path-style</code>","text":"<p>Set this to <code>true</code> to force the request to use path-style addressing (i.e. <code>http://s3.amazonaws.com/BUCKET/KEY</code>). By default, the S3 client will use virtual hosted bucket addressing when possible (i.e. <code>http://BUCKET.s3.amazonaws.com/KEY</code>).</p> Name Value type bool required no default <code>false</code> cli <code>--s3-use-path-style</code> env <code>TERRALIST_S3_USE_PATH_STYLE</code>"},{"location":"configuration/#s3-server-side-encryption","title":"<code>s3-server-side-encryption</code>","text":"<p>The server-side encryption algorithm that was used when you store this object in Amazon S3.</p> Name Value type select choices <code>none</code>, <code>AES256</code>, <code>aws:kms</code>, <code>aws:kms:dsse</code> required no default <code>AES256</code> cli <code>--s3-server-side-encryption</code> env <code>TERRALIST_S3_SERVER_SIDE_ENCRYPTION</code>"},{"location":"configuration/#s3-use-acls","title":"<code>s3-use-acls</code>","text":"<p>Use S3 ACLs for access control. By default, Terralist relies on the S3 bucket configuration (e.g. via AWS S3 Bucket Policy) for enforcing the privacy of the artifacts.</p> Name Value type bool required no default <code>false</code> cli <code>--s3-use-acls</code> env <code>TERRALIST_S3_USE_ACLS</code>"},{"location":"configuration/#local-store","title":"<code>local-store</code>","text":"<p>The path to a directory in which Terralist can store files.</p> Name Value type string required no default <code>~/.terralist.d</code> cli <code>--local-store</code> env <code>TERRALIST_LOCAL_STORE</code>"},{"location":"configuration/#azure-account-name","title":"<code>azure-account-name</code>","text":"<p>The Azure account name.</p> Name Value type string required no default <code>n/a</code> cli <code>--azure-account-name</code> env <code>TERRALIST_AZURE_ACCOUNT_NAME</code>"},{"location":"configuration/#azure-account-key","title":"<code>azure-account-key</code>","text":"<p>The Azure account key.</p> Name Value type string required no default <code>n/a</code> cli <code>--azure-account-key</code> env <code>TERRALIST_AZURE_ACCOUNT_KEY</code>"},{"location":"configuration/#azure-container-name","title":"<code>azure-container-name</code>","text":"<p>The Azure container name.</p> Name Value type string required no default <code>n/a</code> cli <code>--azure-container-name</code> env <code>TERRALIST_AZURE_CONTAINER_NAME</code>"},{"location":"configuration/#azure-sas-expire","title":"<code>azure-sas-expire</code>","text":"<p>The number of minutes after which the Azure Shared Access Signature(SAS) should expire.</p> Name Value type int required no default <code>15</code> cli <code>--azure-sas-expire</code> env <code>TERRALIST_AZURE_SAS_EXPIRE</code>"},{"location":"configuration/#gcs-bucket-name","title":"<code>gcs-bucket-name</code>","text":"<p>The GCS bucket name.</p> Name Value type string required no default <code>n/a</code> cli <code>--gcs-bucket-name</code> env <code>TERRALIST_GCS_BUCKET_NAME</code>"},{"location":"configuration/#gcs-bucket-prefix","title":"<code>gcs-bucket-prefix</code>","text":"<p>A prefix to be added to the GCS bucket objects.</p> Name Value type string required no default <code>n/a</code> cli <code>--gcs-bucket-prefix</code> env <code>TERRALIST_GCS_BUCKET_PREFIX</code>"},{"location":"configuration/#gcs-sign-expire","title":"<code>gcs-sign-expire</code>","text":"<p>The number of minutes after which the signed URLs should expire.</p> Name Value type int required no default <code>15</code> cli <code>--gcs-sign-expire</code> env <code>TERRALIST_GCS_SIGN_EXPIRE</code>"},{"location":"configuration/#gcs-service-account-cred-file-path","title":"<code>gcs-service-account-cred-file-path</code>","text":"<p>The GCP Service Account key path access key ID to access the GCS bucket. Leave empty for default credentials</p> Name Value type string required no default <code>n/a</code> cli <code>--gcs-service-account-cred-file-path</code> env <code>TERRALIST_GCS_SERVICE_ACCOUNT_CRED_FILE_PATH</code>"},{"location":"configuration/#custom-company-name","title":"<code>custom-company-name</code>","text":"<p>A small NIT branding of Terralist. The name of the company set by this variable will appear on the login page.</p> Name Value type string required no default <code>n/a</code> cli <code>--custom-company-name</code> env <code>TERRALIST_CUSTOM_COMPANY_NAME</code>"},{"location":"configuration/#example-yaml-configuration-file","title":"Example YAML configuration file","text":"<pre><code># Try to read PORT from the environment variable, and if it's missing,\n# fallback to 5758\nport: \"${PORT:5758}\"\n\nlog-level: \"debug\"\n\noauth-provider: \"github\"\ngh-client-id: \"${GITHUB_OAUTH_CLIENT_ID}\"\ngh-client-secret: \"${GITHUB_OAUTH_CLIENT_SECRET}\"\n# gh-organization is optional, you can set it to restrict access to the registry\n# only to members of your GitHub organization\ngh-organization: \"my-org\"\n# gh-teams is optional, only users that are part of one of the teams will be able to access the registry\n# gh-organization is required for gh-teams to work\n# you must use the slug version of the team\ngh-teams: \"team-a,team-b\"\ntoken-signing-secret: \"supersecretstring\"\n\ndatabase-backend: \"sqlite\"\nsqlite-path: \"terralist.db\"\n\n# database-backend: \"postgresql\"\n# postgres-url: \"${DATABASE_URL:postgres://admin:admin@localhost:5678/public}\"\n\n# database-backend: \"mysql\"\n# mysql-url: \"admin:admin@tcp(localhost:3306)/terralist\"\n\nmodules-storage-resolver: \"s3\" # or \"azure\"\nproviders-storage-resolver: \"proxy\"\n\ns3-bucket-name: \"my-bucket\"\ns3-bucket-region: \"us-east-1\"\ns3-access-key-id: \"${AWS_ACCESS_KEY_ID}\"\ns3-secret-access-key: \"${AWS_SECRET_ACCESS_KEY}\"\n\n# azure-account-name: \"Globally unique name of your storage account\"\n# azure-container-name: \"Name of the container in the storage account\"\n# azure-account-key: \"Access key of the storage account\" # If not using DefaultAzureCredentials\n# azure-sas-expire: 45 # The number of minutes after which the SAS should expire.\n\n# local-store: \"~/.terralist.d\"\n\nsession-store: \"cookie\"\n\ncookie-secret: \"anothersupersecretstring\"\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>If you're following this documentation as a step-by-step guide, it is recommended to read the installation document first.</p>"},{"location":"getting-started/#configure-the-oauth-provider","title":"Configure the Oauth provider","text":"<p>Terraform authenticates users with Oauth 2.0. You will need credentials of an Oauth Application from our supported providers:</p> <ul> <li>GitHub</li> <li>BitBucket</li> <li>GitLab The <code>email</code> and <code>openid</code> scopes must assigned for the GitLab Oauth application</li> <li>OpenID Connect</li> </ul> <p>For local development, you can set the homepage URL to <code>http://localhost:5758</code> and the callback URL to <code>http://localhost:5758/v1/api/auth/redirect</code>.</p> <p>The port <code>5758</code> is the default. If you decide to change it, you will also need to change it in the Oauth App settings.</p>"},{"location":"getting-started/#launch-the-server","title":"Launch the server","text":"<p>Once you have the executable, create a new configuration file to add the minimum required configuration. While Terralist can be highly configured, the following settings are required and Terralist cannot operate without them:</p> <ul> <li><code>oauth-provider</code>: the Oauth provider you wish to use for your instance (e.g. <code>github</code>).</li> <li>the Oauth provider configuration: it depends on what provider you selected (e.g. for GitHub, <code>gh-client-id</code> and <code>gh-client-secret</code>);</li> <li><code>token-signing-secret</code>: a random string to protect the tokens;</li> <li><code>cookie-secret</code>: a random string to protect the cookies;</li> </ul> config.yaml<pre><code>oauth-provider: github\ngh-client-id: ${GITHUB_OAUTH_CLIENT_ID:default}\ngh-client-secret: ${GITHUB_OAUTH_CLIENT_SECRET:default}\ntoken-signing-secret: secret\ncookie-secret: secret\n</code></pre> <p>The command above will create a configuration file that is instructing Terralist to read the GitHub Oauth credentials from the <code>GITHUB_OAUTH_CLIENT_ID</code> and <code>GITHUB_OAUTH_CLIENT_SECRET</code> environment variables. If those variables are not set in your environment, Terralist will start, but it will be unusable (as you cannot login).</p> <p>Then, you can start the Terralist server:</p> UNIX &amp; UNIX-likeWindowsDocker <pre><code>./terralist server --config config.yaml\n</code></pre> <pre><code>.\\terralist.exe server --config config.yaml\n</code></pre> <pre><code>docker run --rm -it -p 5758:5758 -v ${PWD}:/app ghcr.io/terralist/terralist server --config /app/config.yaml\n</code></pre> <p>If the server correctly started, you should see the following log line: <pre><code>{\"level\":\"info\",\"time\":\"---\",\"message\":\"Terralist started, listening on port 5758\"}\n</code></pre></p>"},{"location":"getting-started/#interacting-with-terraformopentofu","title":"Interacting with Terraform/OpenTofu","text":"<p>Since the terraform-cli/opentofu-cli expects all responses to be from an HTTPS server, the standard <code>localhost:5758</code> will return an error when trying to login.</p> <p>In order to enable this interaction, you should expose the Terralist server with an HTTPS endpoint. There are multiple options to do such:</p> <ul> <li>Use Terralist TLS support via the <code>cert-file</code> and <code>key-file</code> arguments; you will have to bring your own certificate for this (a self-signed certificate also works);</li> <li>Expose Terralist behind a reverse-proxy;</li> <li>Expose Terralist with a managed reverse-proxy like ngrok;</li> </ul> <p>See local development for more details.</p>"},{"location":"getting-started/#cli-authentication","title":"CLI Authentication","text":"<p>You can authenticate in Terralist by using the <code>login</code> subcommand:</p> TerraformOpenTofu <pre><code>terraform login localhost:5758\n</code></pre> <pre><code>tofu login localhost:5758\n</code></pre>"},{"location":"getting-started/#create-an-authority","title":"Create an authority","text":"<p>Authorities represents namespaces in Terralist. Every authority can have modules and providers which can be uploaded to Terralist by using an authority API key. </p> <p>You may notice that during the upload process of modules and providers you are not asked to input the namespace. This is happening because Terralist will decide the namespace based on your authorization token.</p> <p>To create a new authority, you must use the web dashboard. Access your Terralist instance by opening a browser and navigating to your <code>TERRALIST_URL</code> address (by default, it should be http://localhost:5758).</p> Go to the settings pageFill the Authority form <p></p> <p>Open the settings page (step 1) and then press on the <code>New Authority</code> button (step 2).</p> <p></p> <p>Fill in your authority details. Only the name is required (step 1). When you are done, press on the <code>Continue</code> button (step 2).</p> <p>Terralist is case insensitive, so it doesn't matter if you choose to use upper-case letters here, but then you want to use lower-case letters in your TF files.</p> <p>Once you have your authority, if you're planning to use it to host custom providers, you should add a signing key. Providers are signed with a GPG key and Terraform/OpenTofu use this registry-provided signing key to validate the authenticity of the newly downloaded provider.</p>"},{"location":"getting-started/#generate-an-api-key","title":"Generate an API Key","text":"<p>To create a new API key, you must use the web dashboard. Access your Terralist instance by opening a browser and navigating to your <code>TERRALIST_URL</code> address (by default, it should be http://localhost:5758), then navigate to the Settings page.</p> Create an API keyView the API keyCopy the API key <p></p> <p>Under your authority, press on the \"+\" sign (step 1) to create a new API key. A confirmation modal should open, awaiting for your confirmation. Press <code>Continue</code> (step 2).</p> <p></p> <p>Once you have the API key, you can open a modal to view it. Press on the arrow down symbol (step 1) to open the API keys list for your authority, then press the eye symbol to open the view modal (step 2).</p> <p></p> <p>You can use this modal view to check the value of your API key.</p> <p>If you read this documentation as a step-by-step guide, copy this API key and export it as <code>TERRALIST_API_KEY</code> environment variable.</p>"},{"location":"getting-started/#upload-a-new-module","title":"Upload a new module","text":"<p>To upload a new module, you can use Terralist's API:</p> <pre><code>curl -X POST http://localhost:5758/v1/api/modules/my-module/provider/1.0.0/upload \\\n     -H \"Authorization: Bearer x-api-key:$TERRALIST_API_KEY\" \\\n     -d '{ \"download_url\": \"/home/bob/terraform-modules/example-module\" }'\n</code></pre> <p>Terralist uses the same library Terraform uses to make downloads go-getter, so the above example takes advantage of the fact that Terralist runs on your local computer and uses the local getter to \"download\" the module. If your Terralist server is deployed remotely, the above command should not work (since that particular path cannot resolve on the remote server).</p>"},{"location":"getting-started/#use-the-module","title":"Use the module","text":"<pre><code>module \"example-module\" {\n  source  = \"localhost:5758/my-authority/my-module/provider\"\n  version = \"1.0.0\"\n\n  // ...\n}\n</code></pre>"},{"location":"getting-started/#upload-a-new-provider","title":"Upload a new provider","text":"<p>To upload a new module, you can use Terralist's API. First, create a payload file:</p> random-2.0.0.json<pre><code>{\n  \"protocols\": [\n    \"4.0\",\n    \"5.1\"\n  ],\n  \"shasums\": {\n    \"url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS\",\n    \"signature_url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS.sig\"\n  },\n  \"platforms\": [\n    {\n      \"os\": \"darwin\",\n      \"arch\": \"amd64\",\n      \"download_url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_darwin_amd64.zip\",\n      \"shasum\": \"55ced41e5f68730ef36272d4953f336a50f318c1d1d174665f5fa76cb5df08ae\"\n    },\n    {\n      \"os\": \"linux\",\n      \"arch\": \"amd64\",\n      \"download_url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_linux_amd64.zip\",\n      \"shasum\": \"5f9c7aa76b7c34d722fc9123208e26b22d60440cb47150dd04733b9b94f4541a\"\n    }\n  ]\n}\n</code></pre> <p>Then, call the API to upload it:</p> <pre><code>curl -X POST localhost:5758/v1/api/providers/random/2.0.0/upload \\\n     -H \"Authorization: Bearer x-api-key:$TERRALIST_API_KEY\" \\\n     -d \"$(cat random-2.0.0.json)\"\n</code></pre> <p>In order for this provider to be fully validated by Terraform/OpenTofu, you should add the public GPG key of HashiCorp to your authority.</p>"},{"location":"getting-started/#use-the-provider","title":"Use the provider","text":"<pre><code>terraform {\n  required_providers {\n    random = {\n      source  = \"localhost:5758/my-authority/random\"\n      version = \"2.0.0\"\n    }\n  }\n}\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>To install Terralist on your machine, select below your operating system and your CPU architecture.</p> LinuxMacOSWindowsDocker <p>Download</p> amd64i386arm64 <pre><code>curl -sL https://github.com/terralist/terralist/releases/latest/download/terralist_linux_amd64.zip -o terralist_linux_amd64.zip\nunzip terralist_linux_amd64.zip\n</code></pre> <pre><code>curl -sL https://github.com/terralist/terralist/releases/latest/download/terralist_linux_386.zip -o terralist_linux_386.zip\nunzip terralist_linux_386.zip\n</code></pre> <pre><code>curl -sL https://github.com/terralist/terralist/releases/latest/download/terralist_linux_arm64.zip -o terralist_linux_arm64.zip\nunzip terralist_linux_arm64.zip\n</code></pre> <p>Usage</p> <pre><code>./terralist --help\n</code></pre> <p>Download</p> amd64arm64 <pre><code>curl -sL https://github.com/terralist/terralist/releases/latest/download/terralist_linux_amd64.zip -o terralist_darwin_amd64.zip\nunzip terralist_darwin_amd64.zip\n</code></pre> <pre><code>curl -sL https://github.com/terralist/terralist/releases/latest/download/terralist_darwin_arm64.zip -o terralist_darwin_arm64.zip\nunzip terralist_darwin_arm64.zip\n</code></pre> <p>Usage</p> <pre><code>./terralist --help\n</code></pre> <p>Download</p> amd64i386 <pre><code>Invoke-WebRequest \"https://github.com/terralist/terralist/releases/latest/download/terralist_windows_amd64.zip\" -OutFile \"terralist_windows_amd64.zip\"\nExpand-Archive terralist_windows_amd64.zip -DestinationPath terralist\n</code></pre> <pre><code>Invoke-WebRequest \"https://github.com/terralist/terralist/releases/latest/download/terralist_windows_386.zip\" -OutFile \"terralist_windows_386.zip\"\nExpand-Archive terralist_windows_386.zip -DestinationPath terralist\n</code></pre> <p>Usage</p> <pre><code>.\\terralist.exe --help\n</code></pre> <p>Download</p> <pre><code>docker pull ghcr.io/terralist/terralist\n</code></pre> <p>Usage</p> <pre><code>docker run ghcr.io/terralist/terralist --help\n</code></pre> <p>If you're following this documentation as a step-by-step guide, you may proceed with the Getting Started guide.</p>"},{"location":"dev-guide/","title":"Developer Guide","text":"<p>The Terralist Developer Guide provides documentation for developers and contributors of Terralist itself. You can jump directly to a page listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order.</p> <ul> <li>API Reference</li> <li>Local Development</li> </ul>"},{"location":"dev-guide/api-reference/","title":"API Reference","text":""},{"location":"dev-guide/api-reference/#liveness-probe","title":"Liveness Probe","text":"<pre><code>GET /check/healthz\n</code></pre> <p>Responds with status 200 OK if the Terralist instance is healthy.</p>"},{"location":"dev-guide/api-reference/#example-request","title":"Example Request","text":"<pre><code>curl -L http://localhost:5758/check/healthz\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response","title":"Example Response","text":"Status 200"},{"location":"dev-guide/api-reference/#readiness-probe","title":"Readiness Probe","text":"<pre><code>GET /check/readyz\n</code></pre> <p>Responds with status 200 OK if the Terralist instance is ready.</p>"},{"location":"dev-guide/api-reference/#example-request_1","title":"Example Request","text":"<pre><code>curl -L http://localhost:5758/check/readyz\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response_1","title":"Example Response","text":"Status 200"},{"location":"dev-guide/api-reference/#service-discovery","title":"Service Discovery","text":"<pre><code>GET /.well-known/terraform.json\n</code></pre> <p>Terraform/OpenTofu service discovery endpoint. Instructs the CLI tool where to find resources.</p>"},{"location":"dev-guide/api-reference/#example-request_2","title":"Example Request","text":"<pre><code>curl -L http://localhost:5758/.well-known/terraform.json\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response_2","title":"Example Response","text":"Status 200 <pre><code>{\n  \"login.v1\": {\n    \"authz\": \"/v1/auth/authorization\",\n    \"client\": \"terraform-cli\",\n    \"grant_types\": [\n      \"authz_code\"\n    ],\n    \"ports\": [10000, 10010],\n    \"token\": \"/v1/auth/token\"\n  },\n  \"modules.v1\": \"/v1/modules/\",\n  \"providers.v1\": \"/v1/providers/\"\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#list-all-versions-for-a-provider","title":"List all versions for a provider","text":"<pre><code>GET /v1/providers/:namespace/:name/versions\n</code></pre> <p>Get all versions for a provider.</p>"},{"location":"dev-guide/api-reference/#example-request_3","title":"Example Request","text":"<pre><code>curl -L \\\n  -H \"Authorization: Bearer &lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/providers/NAMESPACE/NAME/versions\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response_3","title":"Example Response","text":"Status 200Status 401Status 404 <pre><code>{\n  \"versions\": [\n    {\n      \"version\": \"5.46.0\",\n      \"protocols\": [\n        \"5.0\"\n      ],\n      \"platforms\": [\n        {\n          \"os\": \"linux\",\n          \"arch\": \"amd64\"\n        },\n        {\n          \"os\": \"darwin\",\n          \"arch\": \"amd64\"\n        },\n        {\n          \"os\": \"darwin\",\n          \"arch\": \"arm64\"\n        },\n        {\n          \"os\": \"windows\",\n          \"arch\": \"amd64\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": \"requested provider was not found: no provider found with given arguments (provider hashicorp/aws)\"\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#download-provider-version","title":"Download provider version","text":"<pre><code>GET /v1/providers/:namespace/:name/:version/download/:system/:arch\n</code></pre> <p>Download a specific provider version.</p>"},{"location":"dev-guide/api-reference/#example-request_4","title":"Example Request","text":"<pre><code>curl -L \\\n  -H \"Authorization: Bearer &lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/providers/NAMESPACE/NAME/VERSION/download/SYSTEM/ARCH\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response_4","title":"Example Response","text":"Status 200Status 401Status 404 <pre><code>{\n  \"protocols\": [\n    \"5.0\"\n  ],\n  \"os\": \"linux\",\n  \"arch\": \"amd64\",\n  \"filename\": \"terraform-provider-aws_5.46.0_linux_amd64.zip\",\n  \"download_url\": \"https://SOME-BUCKET-NAME.s3.SOME-REGION.amazonaws.com/providers/hashicorp/aws/5.46.0/terraform-provider-aws_5.46.0_linux_amd64.zip?X-Amz-Algorithm=[REDACTED]&amp;X-Amz-Credential=[REDACTED]&amp;X-Amz-Date=[REDACTED]&amp;X-Amz-Expires=900&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=[REDACTED]\",\n  \"shasums_url\": \"https://SOME-BUCKET-NAME.s3.SOME-REGION.amazonaws.com/providers/hashicorp/aws/5.46.0/terraform-provider-aws_5.46.0_SHA256SUMS?X-Amz-Algorithm=[REDACTED]&amp;X-Amz-Credential=[REDACTED]&amp;X-Amz-Date=[REDACTED]&amp;X-Amz-Expires=900&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=[REDACTED]\",\n  \"shasums_signature_url\": \"https://SOME-BUCKET-NAME.s3.SOME-REGION.amazonaws.com/providers/hashicorp/aws/5.46.0/terraform-provider-aws_5.46.0_SHA256SUMS.sigX-Amz-Algorithm=[REDACTED]&amp;X-Amz-Credential=[REDACTED]&amp;X-Amz-Date=[REDACTED]&amp;X-Amz-Expires=900&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=[REDACTED]\",\n  \"shasum\": \"37cdf4292649a10f12858622826925e18ad4eca354c31f61d02c66895eb91274\",\n  \"signing_keys\": {\n    \"gpg_public_keys\": [\n      {\n        \"key_id\": \"34365D9472D7468F\",\n        \"ascii_armor\": \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n\\n[REDACTED FOR SIMPLICITY]\\n-----END PGP PUBLIC KEY BLOCK-----\",\n        \"trust_signature\": \"\",\n        \"string\": \"hashicorp\",\n        \"source_url\": \"https://www.hashicorp.com/security.html\"\n      }\n    ]\n  }\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"not found\"\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#upload-a-provider-version","title":"Upload a provider version","text":"<pre><code>POST /v1/api/providers/:name/:version/upload\n</code></pre> <p>Upload a new provider version.</p> <p>If the URLs from which the provider files should be downloaded are of types <code>http</code> or <code>https</code>, a dictionary of headers can be additionally passed, depending on your needs. If those headers are passed-in for other URL types, they will be ignored.</p>"},{"location":"dev-guide/api-reference/#example-request_5","title":"Example Request","text":"<pre><code>curl -L -X POST \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  -d '{\n    \"protocols\": [\"5.0\"],\n    \"headers\": {\n      \"Accept\": \"application/octet-stream\",\n      \"Authorization\": \"Bearer {TOKEN}\",\n      \"X-GitHub-Api-Version\": \"2022-11-28\"\n    },\n    \"shasums\": {\n      \"url\": \"https://api.github.com/repos/{OWNER}/{REPO}/releases/assets/{SHA256SUMS-ASSET-ID}\",\n      \"signature_url\": \"https://api.github.com/repos/{OWNER}/{REPO}/releases/assets/{SHA256SUMS-SIG-ASSET-ID}\",\n    },\n    \"platforms\": [\n      {\n        \"os\": \"linux\",\n        \"arch\": \"amd64\",\n        \"download_url\": \"https://api.github.com/repos/{OWNER}/{REPO}/releases/assets/{PROVIDER-LINUX-AMD64-ASSET-ID}\",\n        \"shasum\": \"{SHASUM}\"\n      }\n    ]\n  }' \\\n  http://localhost:5758/v1/api/providers/NAME/VERSION/upload\n</code></pre> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p> Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#remove-a-provider","title":"Remove a provider","text":"<pre><code>DELETE /v1/api/providers/:name/remove\n</code></pre> <p>Remove a provider together with all its uploaded versions.</p>"},{"location":"dev-guide/api-reference/#example-request_6","title":"Example Request","text":"<pre><code>curl -L -X DELETE \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/api/providers/NAME/remove\n</code></pre> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p>"},{"location":"dev-guide/api-reference/#example-response_5","title":"Example Response","text":"Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#remove-a-provider-version","title":"Remove a provider version","text":"<pre><code>DELETE /v1/api/providers/:name/:version/remove\n</code></pre> <p>Remove a specific provider version.</p>"},{"location":"dev-guide/api-reference/#example-request_7","title":"Example Request","text":"<pre><code>curl -L -X DELETE \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/api/providers/NAME/VERSION/remove\n</code></pre> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p>"},{"location":"dev-guide/api-reference/#example-response_6","title":"Example Response","text":"Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#list-all-versions-for-a-module","title":"List all versions for a module","text":"<pre><code>GET /v1/modules/:namespace/:name/:provider/versions\n</code></pre> <p>Get all versions for a module.</p>"},{"location":"dev-guide/api-reference/#example-request_8","title":"Example Request","text":"<pre><code>curl -L \\\n  -H \"Authorization: Bearer &lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/modules/NAMESPACE/NAME/PROVIDER/versions\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response_7","title":"Example Response","text":"Status 200Status 401Status 404 <pre><code>{\n  \"modules\": [\n    {\n      \"versions\": [\n        {\n          \"version\": \"5.5.3\"\n        },\n        {\n          \"version\": \"5.6.0\"\n        },\n        {\n          \"version\": \"5.7.0\"\n        },\n        {\n          \"version\": \"5.7.1\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": \"no module found with given arguments (source terraform-aws-modules/vpc/aws)\"\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#download-module-version","title":"Download module version","text":"<pre><code>GET /v1/modules/:namespace/:name/:provider/:version/download\n</code></pre> <p>Download a specific provider version.</p>"},{"location":"dev-guide/api-reference/#example-request_9","title":"Example Request","text":"<pre><code>curl -L \\\n  -H \"Authorization: Bearer &lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/modules/NAMESPACE/NAME/PROVIDER/VERSION/download\n</code></pre>"},{"location":"dev-guide/api-reference/#example-response_8","title":"Example Response","text":"Status 204Status 401Status 404 <pre><code>{}\n</code></pre> <p>The <code>X-Terraform-Get</code> header should be set to the correct download link for this module.</p> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"not found\"\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#upload-a-module-version","title":"Upload a module version","text":"<pre><code>POST /v1/api/modules/:name/:provider/:version/upload\n</code></pre> <p>Upload a new module version.</p> <p>If the URL from which the module files should be downloaded is of types <code>http</code> or <code>https</code>, a dictionary of headers can be additionally passed, depending on your needs. If those headers are passed-in for other URL types, they will be ignored.</p>"},{"location":"dev-guide/api-reference/#example-request_10","title":"Example Request","text":"GitHub APIGitHub HTTP <pre><code>curl -L -X POST \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  -d '{\n    \"download_url\": \"https://api.github.com/repos/{OWNER}/{REPO}/releases/assets/{ASSET-ID}?archive=zip\",\n    \"headers\": {\n        \"Accept\": \"application/octet-stream\",\n        \"Authorization\": \"Bearer {TOKEN}\",\n        \"X-GitHub-Api-Version\": \"2022-11-28\"\n    }\n  }' \\\n  http://localhost:5758/v1/api/modules/NAME/PROVIDER/VERSION/upload\n</code></pre> <p>Notice the <code>archive=zip</code> query argument. If you want to instruct Terralist to download the asset from the API, you will also need to manually specify that the asset which is being downloaded is a zip archive.</p> <pre><code>curl -L -X POST \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  -d '{\n    \"download_url\": \"https://github.com/{OWNER}/{REPO}/archive/refs/tags/{RELEASE-TAG-NAME}.zip\",\n    \"headers\": {\n        \"Accept\": \"application/octet-stream\",\n        \"Authorization\": \"Basic {YOUR-GITHUB-BASE64ENC-USERNAME-TOKEN}\"\n    }\n  }' \\\n  http://localhost:5758/v1/api/modules/NAME/PROVIDER/VERSION/upload\n</code></pre> <p>To obtain the basic auth token you can base64-encode the following string: <code>{your-github-username}:{your-github-pat-with-read-access-to-the-repository}</code>.</p> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p>"},{"location":"dev-guide/api-reference/#example-response_9","title":"Example Response","text":"Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#upload-a-module-version-with-local-files","title":"Upload a module version (with local files)","text":"<pre><code>POST /v1/api/modules/:name/:provider/:version/upload-files\n</code></pre> <p>Upload a new module version (with local files).</p>"},{"location":"dev-guide/api-reference/#example-request_11","title":"Example Request","text":"<pre><code>curl -L -X POST \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  -F \"module=@/path/to/your-module.zip\"\n  http://localhost:5758/v1/api/modules/NAME/PROVIDER/VERSION/upload-files\n</code></pre> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p>"},{"location":"dev-guide/api-reference/#example-response_10","title":"Example Response","text":"Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#remove-a-module","title":"Remove a module","text":"<pre><code>DELETE /v1/api/modules/:name/:provider/remove\n</code></pre> <p>Remove a module together with all its uploaded versions.</p>"},{"location":"dev-guide/api-reference/#example-request_12","title":"Example Request","text":"<pre><code>curl -L -X DELETE \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/api/modules/NAME/PROVIDER/remove\n</code></pre> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p> Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/api-reference/#remove-a-module-version","title":"Remove a module version","text":"<pre><code>DELETE /v1/api/modules/:name/:provider/:version/remove\n</code></pre> <p>Remove a specific module version.</p>"},{"location":"dev-guide/api-reference/#example-request_13","title":"Example Request","text":"<pre><code>curl -L -X DELETE \\\n  -H \"Authorization: Bearer x-api-key:&lt;YOUR-TOKEN&gt;\" \\\n  http://localhost:5758/v1/api/modules/NAME/PROVIDER/VERSION/remove\n</code></pre> <p>There is no need for you to specify the namespace, as Terralist will resolve it based on your API key.</p>"},{"location":"dev-guide/api-reference/#example-response_11","title":"Example Response","text":"Status 200Status 401Status 4xx/5xx <pre><code>{\n  \"errors\": []\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"Authorization: missing\",\n    \"X-API-Key: missing\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    \"...\",\n  ]\n}\n</code></pre>"},{"location":"dev-guide/local-development/","title":"Local Development","text":"<p>Terralist is built in go, which makes it easy to distribute and especially, to run locally, but unfortunately, Terraform/OpenTofu expects the registry to run over HTTPS. If you are developing Terralist and don't plan to use it via a Terraform/OpenTofu interaction, you don't need to follow this document, but otherwise, let's start.</p> <p>There are multiple options to expose Terralist over HTTPS:</p> <ol> <li>Use the built-in TLS support (with <code>cert-file</code> and <code>key-file</code> configuration options).   In this case, you will have to bring your own certificate. You can also generate a self-signed certificate.</li> <li>Use a reverse-proxy in front of Terralist that can expose Terralist over HTTPS.</li> <li>Use a managed reverse-proxy in front of Terralist, such as ngrok.</li> </ol> <p>It's up to you which method you want to choose. Let's break them down.</p>"},{"location":"dev-guide/local-development/#self-signed-certificate","title":"Self-Signed Certificate","text":"<p>For this method you need a self-signed certificate. There are plenty of resources over the internet that can teach you how to do it, for example, you can check this blog post.</p> <p>Once you have your certificate and you configured your computer to trust it, you can configure Terralist with the following two options:</p> config.yaml<pre><code>cert-file: /path/to/your/cert-in-pem-format\nkey-file: /path/to/your/cert-key-in-pem-format\n</code></pre>"},{"location":"dev-guide/local-development/#reverse-proxy","title":"Reverse proxy","text":"<p>For this method you need a reverse-proxy in front of Terralist. You can either use NGINX, traefik or others, but keep in mind they might need the same self-signed certificate setup as above. This method is recommended if you already have a reverse-proxy configured and you don't want to redo the certificate setup.</p>"},{"location":"dev-guide/local-development/#managed-reverse-proxy","title":"Managed reverse proxy","text":"<p>There are multiple managed reverse proxy software tools out there, but in this document we will present ngrok. Start by following the ngrok's Quickstart guide.</p> <p>Once you have your ngrok setup, you can make it point to your Terralist instance by using:</p> <pre><code>ngrok http 5758\n</code></pre> <p>By default, Terralist is listening on the <code>5758</code> port. If you changed it, make sure to update the ngrok command accordingly.</p> <p>Watch the ngrok output and look for the following line:</p> <pre><code>Forwarding  https://&lt;some-uuid&gt;.ngrok.io -&gt; http://localhost:5758\n</code></pre> <p>The <code>&lt;some-uuid&gt;.ngrok.io</code> value is the one you need. Copy it and leave the ngrok instance running in the background.</p> <p>Update your Oauth application to use this URL instead (for the callback URL attribute).</p> <p>If you are using a free ngrok installation, this URL may rotate every time you reboot your ngrok process. Make sure to update the Oauth application every time.</p> <p>Now, your setup is complete. You may proceed to authenticate from the Terraform/OpenTofu CLI.</p> TerraformOpenTofu <pre><code>terraform login &lt;some-uuid&gt;.ngrok.io\n</code></pre> <pre><code>tofu login &lt;some-uuid&gt;.ngrok.io\n</code></pre> <p>Terraform stores the token from the login command in <code>$HOME/.terraform.d/credentials.tfrc.json</code>. As you may start and stop your server multiple times and the URL changes everytime, this file will accumulate a lot of garbage entries fast. You can clean it up every once in a while as you please.</p> <p>Now that you are authenticated, you can start using Terralist in your TF code:</p> <pre><code>module \"example\" {\n  source  = \"&lt;some-uuid&gt;.ngrok.io/NAMESPACE/NAME/PROVIDER\"\n  version = \"1.0.0\"\n}\n</code></pre>"},{"location":"user-guide/","title":"User Guide","text":"<p>The Terralist User Guide provides documentation for users of Terralist. Various guides to configuring and using Terralist can be find here.</p>"},{"location":"user-guide/aws-s3-bucket-configuration/","title":"AWS S3 Bucket Configuration","text":"<p>Terralist supports storing artifacts on S3-compatible backends. This resource presents how you can configure the bucket on AWS S3, so if you are looking for another backend, refer to the <code>s3-</code> prefixed configuration options.</p> <p>The following examples will contain placeholders in the form of <code>{placeholder}</code>. You are expected to replace those placeholders with values that suits your needs.</p>"},{"location":"user-guide/aws-s3-bucket-configuration/#access","title":"Access","text":"<p>For Terralist to be able to access the S3 bucket, you must create an identity for it. There are two possible options:</p> <ul> <li>AWS IAM Role (recommended)</li> <li>AWS IAM User</li> </ul> <p>The bucket can either be created using the legacy ACL system, or with the newer, recommended, bucket policy system. Also, the bucket can either be in the same AWS account with the IAM identity or not. Depending on how and where the bucket is configured, you will either have to attach a policy to the IAM identity or not. Possible cases:</p> Same Account ACLs or Policy Should attach IAM identity policy Yes ACLs Optional Yes Policy Optional No ACLs Yes No Policy Yes <p>If you happen to be in the case where you are not required to attach the IAM identity, you may skip to the Bucket Policy section, as the following policy becomes optional.</p> policy.json<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"FindBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::{s3-bucket-name}\"\n    },\n    {\n      \"Sid\": \"UseBucket\",\n      \"Effect\": \"Allow\",\n       \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::{s3-bucket-name}/{s3-bucket-prefix}/*\"\n    },\n    {\n      \"Sid\": \"DecryptSSE\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:Decrypt\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\": \"arn:aws:kms:{REGION}:{AWS-ACCOUNT-ID}:key/{KEY-ID}\",\n    }\n  ]\n}\n</code></pre> <p>Notice that if you don't want to set a given bucket prefix within your bucket, the second statement (sid = <code>UseBucket</code>) should have the resource set to <code>arn:aws:s3:::{s3-bucket-name}/*</code>.</p> <p>The third statement (sid = <code>DecryptSSE</code>) is required only if the <code>s3-server-side-encryption</code> configuration option is set.</p>"},{"location":"user-guide/aws-s3-bucket-configuration/#bucket-policy","title":"Bucket Policy","text":"<p>To grant Terralist access to the bucket, the following policy should be applied as bucket policy.</p> policy.json<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"UseBucket\",\n      \"Effect\": \"Allow\",\n       \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::{s3-bucket-name}/{s3-bucket-prefix}/*\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::{AWS-ACCOUNT-ID}:{user/role}/{identity-name}\"\n      },\n    }\n  ]\n}\n</code></pre> <p>Notice that if you don't want to set a given bucket prefix within your bucket, the resource should be set to <code>arn:aws:s3:::{s3-bucket-name}/*</code>.</p>"},{"location":"user-guide/rbac-configuration/","title":"RBAC Configuration","text":"<p>The RBAC feature enables restrictions of access to Terralist resources. Terralist does not have its own user management system, delegating this job to one (or more) OAuth 2.0 providers. If the provider authenticates the user, Terralist asks the provider for some metadata and takes the user as being authenticated under those claims. Depending on the provider implementation, those claims can differ.</p> <p>There are two main components where RBAC configuration can be defined:</p> <ul> <li>The server-side (global) RBAC configuration;</li> <li>The API Key RBAC configuration; (Not yet implemented)</li> </ul>"},{"location":"user-guide/rbac-configuration/#basic-built-in-roles","title":"Basic Built-in Roles","text":"<p>Terralist has three pre-defined roles. Not all of them support expansion, but you are free to define new roles as you please (see below).</p> <ul> <li><code>role:anonymous</code>: has access to no resources (unless specified otherwise in the server-side configuration);</li> <li><code>role:readonly</code><sup>*</sup>: read-only access to all resources;</li> <li><code>role:admin</code><sup>*</sup>: unrestricted access to all resources;</li> </ul> <p><sup>*</sup> This role cannot be extended.</p> <p>The <code>role:anonymous</code> is a special role that is assigned to unauthenticated users. This role can be customized from the server-side configuration and through those modifications users are able to expose (publicly) resources from the registry. By default, this role has no grant attached.</p>"},{"location":"user-guide/rbac-configuration/#default-policy-for-authenticated-users","title":"Default Policy for Authenticated Users","text":"<p>When a user is authenticated in Terralist, it will be granted the role specified by the <code>rbac-default-role</code> configuration option, if there is no other role specified for the given user.</p>"},{"location":"user-guide/rbac-configuration/#rbac-model-structure","title":"RBAC Model Structure","text":"<p>The model syntax is based on Casbin and highly inspired from the ArgoCD implementation. There are two different types of syntax: one of assigning policies, and another one for assigning users to internal roles.</p> <p>Group: Used to assign users or groups to internal roles.</p> <p>Syntax: <code>g, &lt;username/useremail/group&gt;, &lt;role&gt;</code></p> <ul> <li><code>&lt;username/useremail/group&gt;</code>: The entity to whom the role will be assigned. Depending on the OAuth provider implementation those values can represent different things; Usually, the <code>username</code> refers to the <code>sub</code> claim, while the <code>useremail</code> and <code>group</code> refers to a custom claims, which might not even be supported by the provider you are using. Check the OAuth provider documentation for more details.</li> <li><code>&lt;role&gt;</code>: The internal role to which the entity will be assigned.</li> </ul> <p>Below is a table that defines claims meaning for each OAuth provider.</p> Provider\\Claim <code>username</code> <code>useremail</code> <code>group</code> BitBucket Username User E-mail Not supported. GitHub Username User E-mail GitHub Organization Teams slugs that the user is part of (if <code>gh-organization</code> configuration option is set). GitLab Username User E-mail GitLab User Group names. OIDC <code>sub</code> claim Not supported. Not supported. <p>Policy: Allows to assign permissions to an entity.</p> <p>Syntax: <code>p, &lt;role/username/useremail/group&gt;, &lt;resource&gt;, &lt;action&gt;, &lt;object&gt;, &lt;effect&gt;</code></p> <ul> <li><code>&lt;role/username/useremail/group&gt;</code>: The entity to whom the policy will be assigned</li> <li><code>&lt;resource&gt;</code><sup>*</sup>: The type of resource on which the action is performed. Can be one of: <code>modules</code>, <code>providers</code>, <code>authorities</code>. Supports glob matching (e.g. )</li> <li><code>&lt;action&gt;</code><sup>*</sup>: The operation that is being performed on the resource. Can be one of: <code>get</code>, <code>create</code>, <code>update</code>, <code>delete</code>. Supports glob matching.</li> <li><code>&lt;object&gt;</code><sup>*</sup>: The object identifier representing the resource on which the action is performed. Supports glob matching. Depending on the resource, the object's format will vary. </li> <li><code>&lt;effect&gt;</code>: Whether this policy should grant or restrict the operation on the target object. One of <code>allow</code> or <code>deny</code>.</li> </ul> <p><sup>*</sup> This attribute supports glob matching. For example, for resources <code>*</code> will match all 3 resources, <code>mod*</code> will match only <code>modules</code>, while for objects <code>my-authority/my-module/aws</code> will match only one module, while <code>my-authority/*/*</code> will match all modules within the authority <code>my-authority</code>.</p> <p>Below is a table that defines the correct object syntax for each resource group.</p> Resource Group Object Syntax <code>authorities</code> <code>&lt;authority-name&gt;</code> <code>modules</code> <code>&lt;authority-name&gt;/&lt;module-name&gt;/&lt;provider-name&gt;</code> <code>providers</code> <code>&lt;authority-name&gt;/&lt;provider-name&gt;</code> <p>For example, an object c</p>"}]}