# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: "3"

tasks:
  tidy:
    desc: "Install all Terralist dependencies and tools."
    silent: true
    cmds:
      - npm install -g yarn && yarn --cwd ./web install
      - go mod tidy

  build:frontend:
    desc: "Build the web application."
    silent: true
    dir: web
    cmds:
      - yarn install
      - yarn build

  build:backend:
    desc: |
      Build the backend application.
      The build mode defaults to 'release'. Debug mode can be enabled 
      by passing the '--debug' CLI argument (as '-- --debug').
    silent: true
    vars:
      WITH_DEBUG_MODE: '{{has "--debug" .CLI_ARGS_LIST}}'
      MODE: '{{ternary "debug" "release" (eq .WITH_DEBUG_MODE "true")}}'
      BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
      COMMIT_HASH:
        sh: git rev-parse --short HEAD
      LATEST_TAG:
        sh: git tag | tail -n 1
      TERRALIST_VERSION: '{{.LATEST_TAG}}-{{regexReplaceAll "[^a-zA-Z0-9-]+" .BRANCH "--"}}+{{.COMMIT_HASH}}'
      BINARY_FILE_NAME: '{{printf "terralist%s" (ternary ".exe" "" (eq OS "windows"))}}'
    env:
      TERRALIST_VERSION: "{{.TERRALIST_VERSION}}"
    cmds:
      - cmd: touch ./web/dist/.gitkeep
        ignore_error: true
      - go mod download
      - >-
        go build \
          -o={{.BINARY_FILE_NAME}} \
          -v \
          -ldflags="-X 'main.Version={{.TERRALIST_VERSION}}' \
                    -X 'main.CommitHash={{.COMMIT_HASH}}' \
                    -X 'main.BuildTimestamp={{now | date "2006-01-02T15:04:05"}}' \
                    -X 'main.Mode={{.MODE}}'" \
          ./cmd/terralist/main.go
      - echo "Executable wrote to '{{ .BINARY_FILE_NAME }}'."

  build:
    desc: "Build Terralist."
    silent: true
    cmds:
      - task: build:frontend
      - task: build:backend

  lint:frontend:
    desc: "Run frontend linters."
    vars:
      SHOULD_FIX: '{{has "--fix" .CLI_ARGS_LIST}}'
    silent: true
    dir: web
    cmds:
      - yarn run {{ternary "format:write" "format:check" (eq .SHOULD_FIX "true")}}
      - yarn run check
      - yarn run {{ternary "lint:fix" "lint:check" (eq .SHOULD_FIX "true")}}

  lint:backend:
    desc: "Run backend linters."
    vars:
      SHOULD_FIX: '{{has "--fix" .CLI_ARGS_LIST}}'
    silent: true
    cmds:
      - go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint run ./... {{ternary "--fix" "" (eq .SHOULD_FIX "true")}}

  lint:
    desc: |
      Runs all Terralist linters.
      Launches into execution all Terralist linters (for both backend and frontend).
      Can also be used to automatically fix all issues found by passing the
      `--fix` CLI argument (as `-- --fix`).
    silent: true
    cmds:
      - task: lint:frontend
      - task: lint:backend

  test:generate-mocks:
    desc: "Generate necessary mock files for the tests to be executed."
    silent: true
    vars:
      MOCKERY_ARGS: '--all --case underscore --note "go:build mocks"'
    cmds:
      - for:
          - source: ./internal/server/services
            output: ./mocks/server/services
          - source: ./internal/server/repositories
            output: ./mocks/server/repositories
          - source: ./pkg/auth
            output: ./mocks/pkg/auth
          - source: ./pkg/auth/jwt
            output: ./mocks/pkg/auth
          - source: ./pkg/file
            output: ./mocks/pkg/file
          - source: ./pkg/storage
            output: ./mocks/pkg/storage
        cmd: |
          if [ "{{.CLI_FORCE}}" = "true" ] || [ ! -d {{.ITEM.output}} ]; then
            go run github.com/vektra/mockery/v2 --dir {{.ITEM.source}} --output {{.ITEM.output}} {{.MOCKERY_ARGS}}
          else
            echo "Generation of {{.ITEM.source}} was skipped because {{.ITEM.output}} already exists."
          fi

  test:prepare-database:
    desc: "Generate an SQLite database ready for testing."
    silent: true
    vars:
      DATABASE_NAME: 'test.db'
    cmds:
      - cmd: rm {{.DATABASE_NAME}}
        ignore_error: true
      - sqlite3 {{.DATABASE_NAME}} 'VACUUM;'
      - sqlite3 {{.DATABASE_NAME}} < ./e2e/data/terralist.sqlite.sql
      - echo "Test database file written at $PWD/{{.DATABASE_NAME}}."

  test:unit:
    desc: "Run all unit tests."
    silent: true
    vars:
      WITH_SUMMARY: '{{has "--summary" .CLI_ARGS_LIST}}'
      ALL_PACKAGES:
        sh: go list ./...
      TEST_EXCLUSIONS: '{{list "mocks" "cmd" "models" | join "|"}}'
      TEST_PACKAGES:
        sh: >-
          {{- $excl := .TEST_EXCLUSIONS -}}
          {{- $pkgs := (list) -}}
          {{- range $i, $pkg := (splitList "\n" .ALL_PACKAGES) -}}
            {{- if not (regexMatch (printf "[/]%s[/]" $excl) $pkg) -}}
              {{- $pkgs = append $pkgs $pkg -}}
            {{- end -}}
          {{- end -}}
          echo "{{$pkgs | join " "}}"
      BUILD_TAGS: "mocks"
    cmds:
      - task: test:generate-mocks
      - >-
        {{- if eq .WITH_SUMMARY "true" -}}
        go run gotest.tools/gotestsum -f testname -- -tags={{.BUILD_TAGS}} -count=1 {{.TEST_PACKAGES}}
        {{- else -}}
        go test -tags={{.BUILD_TAGS}} -count=1 {{.TEST_PACKAGES}}
        {{- end -}}

  test:e2e:
    desc: "Run all E2E tests."
    silent: true
    cmds:
      - task: test:prepare-database
      - echo 'WARNING! Make sure to have a Terralist server up-and-running for the tests to run against.'
      - cmd: rm -r ./reports
        ignore_error: true
      - go run github.com/ovh/venom/cmd/venom run --html-report --output-dir="./reports" --var-from-file ./e2e/variables.yaml ./e2e/suites

  test:
    desc: "Run all tests."
    silent: true
    cmds:
      - task: test:unit
      - task: test:e2e
